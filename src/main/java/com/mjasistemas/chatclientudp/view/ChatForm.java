/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mjasistemas.chatclientudp.view;

import com.mjasistemas.chatclientudp.comunicacao.Solicitacoes;
import com.mjasistemas.chatclientudp.comunicacao.UDPCliente;
import com.mjasistemas.chatclientudp.model.Mensagem;
import com.mjasistemas.chatclientudp.model.RetornoEnum;
import com.mjasistemas.chatclientudp.model.Sala;
import com.mjasistemas.chatclientudp.model.pessoa.Pessoa;
import com.mjasistemas.chatclientudp.model.pessoa.TipoPessoaEnum;
import com.mjasistemas.chatclientudp.model.pessoa.Usuario;


import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javafx.collections.transformation.SortedList;

import javax.swing.JOptionPane;

import org.jdesktop.observablecollections.ObservableCollections;
import org.jdesktop.observablecollections.ObservableList;
import sun.security.pkcs11.P11TlsKeyMaterialGenerator;

/**
 * @author marcio
 */
public class ChatForm extends javax.swing.JFrame {

    private String destinatario = "todos";

    /**
     * @return the mensagensRecebidas
     */
    public ObservableList<Mensagem> getMensagensRecebidas() {
        return mensagensRecebidas;
    }

    /**
     * @param mensagensRecebidas the mensagensRecebidas to set
     */
    public void setMensagensRecebidas(ObservableList<Mensagem> mensagensRecebidas) {
        this.mensagensRecebidas = mensagensRecebidas;
    }

    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.SSS");
    private ObservableList<Pessoa> pessoas;
    private ObservableList<Mensagem> mensagensRecebidas;
    List<Mensagem> lstMesagens = new ArrayList<>();
    private Sala sala;
    private Pessoa pessoa;
    private Mensagem mensagem;
    private Pessoa pessoaSelecionada;
    private String lastTimestamp;

    /**
     * Creates new form ChatForm
     */
    public ChatForm(Sala sala, Pessoa pessoa, Mensagem mensagem, List<Mensagem> lstMensagems) {
        this.sala = sala;
        this.pessoa = pessoa;
        this.mensagem = mensagem;
        this.pessoas = ObservableCollections.observableList(new ArrayList<>());
        this.mensagensRecebidas = ObservableCollections.observableList(new ArrayList<>());
        // this.lstMesagens = lstMesagens;//ObservableCollections.observableList(new ArrayList<>());// esta dando erro na vinculação
        initComponents();
        Pessoa todos = new Usuario();
        todos.setNickName("todos");
        this.pessoas.add(todos);
        iniciar();
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        lastTimestamp = timestamp.toString();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblUsuarios = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtMensagem = new javax.swing.JTextArea();
        btEnviar = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbMensagem = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Sala:");

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${pessoas}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, tblUsuarios);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nickName}"));
        columnBinding.setColumnName("Usuários");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${pessoaSelecionada}"), tblUsuarios, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        tblUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblUsuariosMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tblUsuarios);

        jtMensagem.setColumns(20);
        jtMensagem.setRows(5);
        jScrollPane4.setViewportView(jtMensagem);

        btEnviar.setText("Enviar");
        btEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnviarActionPerformed(evt);
            }
        });

        tbMensagem.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{

                }
        ));

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${mensagensRecebidas}");
        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, tbMensagem);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${timestamp}"));
        columnBinding.setColumnName("Timestamp");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${remetenteString}"));
        columnBinding.setColumnName("Remetente String");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${destinatarioString}"));
        columnBinding.setColumnName("Destinatario String");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${conteudo}"));
        columnBinding.setColumnName("Conteudo");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane5.setViewportView(tbMensagem);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btEnviar))
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 931, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                        .addComponent(btEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)))
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE))
                                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEnviarActionPerformed
        if (destinatario == "nenhum") {
            JOptionPane.showMessageDialog(this, "Selecione o destinatário para enviar a mensagem");
        }
        if (jtMensagem.getText() != null && pessoaSelecionada != null) {
            RetornoEnum resSolicitarMensagem;
            do {

                resSolicitarMensagem = new Solicitacoes().solicitarEnvioMensagem(pessoa.getNickName(),
                        destinatario, sala.getId(), jtMensagem.getText());

            } while (resSolicitarMensagem == RetornoEnum.ERRO_SIZE);
        }
        jtMensagem.setText("");
    }//GEN-LAST:event_btEnviarActionPerformed

    private void tblUsuariosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUsuariosMouseReleased
        if (pessoaSelecionada != null) {
            destinatario = pessoaSelecionada.getNickName();
        } else {
            destinatario = "nenhum";
        }
    }//GEN-LAST:event_tblUsuariosMouseReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

    }//GEN-LAST:event_formWindowClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btEnviar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jtMensagem;
    private javax.swing.JTable tbMensagem;
    private javax.swing.JTable tblUsuarios;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    private SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");

    /**
     * @return the pessoas
     */
    public ObservableList<Pessoa> getPessoas() {
        return pessoas;
    }

    /**
     * @param pessoas the pessoas to set
     */
    public void setPessoas(ObservableList<Pessoa> pessoas) {
        this.pessoas = pessoas;
    }

    public List<Mensagem> getMesnsagems() {
        return lstMesagens;
    }

    public void setMesnsagems(List<Mensagem> mesnsagems) {
        this.lstMesagens = mesnsagems;
    }

    public Mensagem getMensagem() {
        return mensagem;
    }

    public void setMensagem(Mensagem mensagem) {
        this.mensagem = mensagem;
    }

    private void atualizarLista() throws ParseException {
        do {
            List<Pessoa> novaLista = new Solicitacoes().solicitarLogadosSala(this.pessoa.getNickName(), sala.getId());

            //adiciona usuários que entraram
            for (Pessoa p : novaLista) {
                long count = pessoas.stream().filter(item -> item.getNickName().trim().equals(p.getNickName().trim())).count();
                if (count == 0) {
                    pessoas.add(p);
                }
            }

            //remove usuários que saíram
            for (Pessoa p : pessoas) {
                long count = novaLista.stream().filter(item -> item.getNickName().trim().equals(p.getNickName().trim())).count();
                if (!p.getNickName().equals("todos") && count == 0) {
                    pessoas.remove(p);
                }
            }
            

            /*
            if(mensagem.getTimestamp() != null){
                SimpleDateFormat format = new SimpleDateFormat( "yyyy-MM-dd hh:mm:ss.SSS" );
                Date a = new Date();
                a.getTime();                    //seta o time stamp de mesnsagem
                String dataFormatada = format.format(a)+ "." + System.currentTimeMillis()%1000;//converte para dete de um jeito muito loco
                a = format.parse(dataFormatada);
                mensagem.setTimestamp(a);
            } 
             */
            List<Mensagem> novasMensagens = new Solicitacoes().solicitarNovasMensagem(sala.getId(), lastTimestamp);

            if (novasMensagens.size() > 0) {
                mensagensRecebidas.addAll(novasMensagens);
                lastTimestamp = format.format(novasMensagens.get(novasMensagens.size() - 1).getTimestamp());

            }

            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } while (true);

    }

    private void iniciar() {
        Thread queryThreadUpLista = new Thread() {
            public void run() {
                try {
                    atualizarLista();
                } catch (ParseException ex) {
                    Logger.getLogger(ChatForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        queryThreadUpLista.start();

        Thread queryThreadEnviaKeepAlive = new Thread() {
            public void run() {

                enviarKeepAlive();

            }
        };
        queryThreadEnviaKeepAlive.start();
    }

    private void enviarKeepAlive() {
        do{
            new Solicitacoes().enviarKeepAlive(pessoa.getNickName(),this.sala.getId());
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }while (true);
    }

    /**
     * @return the pessoaSelecionada
     */
    public Pessoa getPessoaSelecionada() {
        return pessoaSelecionada;
    }

    /**
     * @param pessoaSelecionada the pessoaSelecionada to set
     */
    public void setPessoaSelecionada(Pessoa pessoaSelecionada) {
        this.pessoaSelecionada = pessoaSelecionada;
    }

}
